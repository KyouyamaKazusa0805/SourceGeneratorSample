namespace SourceGeneratorSample.Core;

/// <summary>
/// 一个源代码生成器的项目，这个项目专门读取根目录下的 Directory.Build.props 文件，
/// 根据配置的 Version 标签的数值，产生一个常量字段 Version，将结果自动写入到该字段里面，
/// 这样的方式达到自动更新的目的。
/// </summary>
[Generator(LanguageNames.CSharp)]
public sealed class VersionGenerator : ISourceGenerator
{
	/// <inheritdoc/>
	public void Execute(GeneratorExecutionContext context)
	{
		var additionalFiles = context.AdditionalFiles;
		if (additionalFiles.FirstOrDefault(predicate) is not { Path: var path })
		{
			return;
		}

		var value = new XmlDocument()
			.LoadFile(path)
			.DocumentElement
			.SelectNodes("descendant::PropertyGroup")
			.Cast<XmlNode>()
			.First()
			.ChildNodes
			.Cast<XmlNode>()
			.Where(static n => n.Name == "Version")
			.Select(static n => n.InnerText)
			.First();

		context.AddSource(
			$"SourceGeneratorVersion{SourceGeneratorFileNameShortcut.VersionGenerator}",
			$$"""
			// <auto-generated />

			#nullable enable
			namespace SourceGeneration;

			/// <summary>
			/// 提供源代码生成器的版本号信息。
			/// </summary>
			[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(VersionGenerator)}}", global::SourceGeneration.SourceGeneratorVersion.Value)]
			internal static class SourceGeneratorVersion
			{
				/// <summary>
				/// 版本号的数值。
				/// </summary>
				[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(VersionGenerator)}}", global::SourceGeneration.SourceGeneratorVersion.Value)]
				public const string Value = "{{value}}";
			}
			"""
		);


		static bool predicate(AdditionalText a)
			=> a.Path is var path
			&& path.IndexOf("Directory.Build.props") is var index and >= 1
			&& path[index - 1] == '\\';
	}

	/// <inheritdoc/>
	public void Initialize(GeneratorInitializationContext context)
	{
	}
}

file static class Extension
{
	public static XmlDocument LoadFile(this XmlDocument @this, string path)
	{
		@this.Load(path);
		return @this;
	}
}
