namespace SourceGeneratorSample.Basic;

/// <summary>
/// 表示一个源代码生成器，生成一个类型，自带一个打招呼的方法。
/// </summary>
/// <remarks>
/// 虽然说这个源代码生成器生成的内容（打招呼）不是特别有意义，因为这里是举例子，
/// 所以不考虑那么多，只是让各位熟练了解源代码生成器生成的内容，以及如何使用源代码生成器。
/// </remarks>
[Generator(LanguageNames.CSharp)]
public sealed class GreetingGenerator_Basic : ISourceGenerator
{
	/// <inheritdoc/>
	public void Execute(GeneratorExecutionContext context)
		=> context.AddSource(
			"Greeting.g.cs",
			$$"""
			// 告知编译器，该文件由源代码生成器或别的手段生成产生的代码。
			// 这样可以防止编译器对这个代码段进行代码分析，避免不必要的编译器警告或普通信息提示。
			// <auto-generated/>

			// 启用可空性检查。为 C# 8 提供的特性“可空引用类型”的单文件启用写法。
			#nullable enable

			// 命名空间的声明。
			namespace SourceGeneratorSample.Greetings;

			/// <summary>
			/// 用于打招呼的类型。
			/// </summary>
			[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
			[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(GreetingGenerator_Basic)}}", "1.0")]
			public static class Greeting
			{
				/// <summary>
				/// 和固定的人打招呼。
				/// </summary>
				/// <param name="name">表示对谁打招呼。指定一个字符串，表示其人的名字。</param>
				[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
				[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(GreetingGenerator_Basic)}}", "1.0")]
				public static void SayHelloTo(string name)
					=> global::System.Console.WriteLine($"Hello, {name}!");
			}
			"""
		);

	/// <inheritdoc/>
	public void Initialize(GeneratorInitializationContext context)
	{
	}
}
