namespace SourceGeneratorSample.IncrementalGenerator.Starters;

/// <summary>
/// 一个打招呼的源代码生成器，使用 <see cref="IIncrementalGenerator"/> 实现，
/// 并且实现内容基于语义节点（<see cref="MethodDeclarationSyntax"/>）来完成。
/// 假设该方法定义使用分部方法。
/// </summary>
[Generator(LanguageNames.CSharp)]
public sealed class GreetingGenerator_PartialMethod : IIncrementalGenerator
{
	/// <inheritdoc/>
	public void Initialize(IncrementalGeneratorInitializationContext context)
		=> context.RegisterSourceOutput(
			context.SyntaxProvider
				.CreateSyntaxProvider(
					NodePredicate,
					static (gsc, _) => (MethodDeclarationSyntax)gsc.Node
				),
			static (spc, method) =>
			{
				var type = method.Ancestors().OfType<TypeDeclarationSyntax>().First();
				var typeName = type.Identifier.ValueText;

				spc.AddSource(
					$"{typeName}{SourceGeneratorFileNameShortcut.GreetingGenerator_PartialMethod_UseIncrementalGenerator}",
					$$"""
					// <auto-generated/>

					#nullable enable
					namespace SourceGeneratorSample.Greetings;

					partial class {{typeName}}
					{
						/// <summary>
						/// 和固定的人打招呼。
						/// </summary>
						/// <param name="name">表示对谁打招呼。指定一个字符串，表示其人的名字。</param>
						public static partial void SayHelloTo2(string name)
							=> global::System.Console.WriteLine($"Hello, {name}!");
					}
					"""
				);
			}
		);

	private static bool NodePredicate(SyntaxNode node, CancellationToken _)
		=> node is MethodDeclarationSyntax
#pragma warning disable format
		{
			Identifier.ValueText: "SayHelloTo2",
			Modifiers: var methodModifiers and not [],
			ReturnType: PredefinedTypeSyntax
			{
				Keyword.RawKind: (int)SyntaxKind.VoidKeyword
			},
			TypeParameterList: null,
			ParameterList.Parameters:
			[
				{
					Type: PredefinedTypeSyntax
					{
						Keyword.RawKind: (int)SyntaxKind.StringKeyword
					}
				}
			],
			Parent: ClassDeclarationSyntax
			{
				Modifiers: var typeModifiers and not []
			}
		}
#pragma warning restore format
		&& methodModifiers.Any(SyntaxKind.PartialKeyword)
		&& typeModifiers.Any(SyntaxKind.PartialKeyword)
		&& methodModifiers.Any(SyntaxKind.StaticKeyword);
}
