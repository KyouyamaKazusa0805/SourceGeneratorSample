namespace AutoOverridding;

/// <summary>
/// 一个源代码生成器，生成对于 <see cref="object"/> 和 <see cref="ValueType"/>
/// 类型里提供的虚方法进行一定的实现。
/// </summary>
[Generator(LanguageNames.CSharp)]
public sealed class AutoOverriddingGenerator : IIncrementalGenerator
{
	/// <inheritdoc/>
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		context.RegisterSourceOutput(
			context.SyntaxProvider
				.ForAttributeWithMetadataName(
					"SourceGeneratorSample.Models.AutoOverriddingAttribute",
					static (_, _) => true,
					static (gasc, _) =>
					{
						if (gasc is not
							{
								TargetNode: MethodDeclarationSyntax
								{
									Modifiers: var methodModifiers and not [],
									Parent: TypeDeclarationSyntax
									{
										Modifiers: var typeModifiers and not []
									}
								},
								TargetSymbol: IMethodSymbol
								{
									Name: nameof(Equals),
									ReturnType.SpecialType: SpecialType.System_Boolean,
									Parameters: [{ Type.SpecialType: SpecialType.System_Object }],
									ContainingType:
									{
										Name: var typeName,
										TypeKind: var typeKind,
										IsRecord: var isRecord,
										TypeParameters: var typeParameters,
										ContainingNamespace: var namespaceSymbol
									} typeSymbol
								}
							})
						{
							return null;
						}

						if (!methodModifiers.Any(SyntaxKind.PartialKeyword)
							|| !typeModifiers.Any(SyntaxKind.PartialKeyword))
						{
							return null;
						}

						return new Data(
							namespaceSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)["global::".Length..],
							(isRecord, typeKind) switch
							{
								(true, TypeKind.Class) => "record",
								(true, TypeKind.Struct) => "record struct",
								(_, TypeKind.Class) => "class",
								(_, TypeKind.Struct) => "struct",
								(_, TypeKind.Interface) => "interface",
								_ => throw new InvalidOperationException()
							},
							typeName,
							typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat),
							typeParameters switch
							{
								[] => null,
								_ => $"<{string.Join(", ", typeParameters)}>"
							},
							methodModifiers
						);
					}
				)
				.Where(static data => data is not null)
				.Select(static (data, _) => data!)
				.Collect(),
			static (spc, data) =>
			{
				var list = new List<string>();
				foreach (var (@namespace, kind, typeName, typeFullName, typeParams, methodModifiers) in data)
				{
					list.Add(
						$$"""
						namespace {{@namespace}}
						{
							partial {{kind}} {{typeName}}{{typeParams}}
							{
								/// <inheritdoc/>
								[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
								[global::System.CodeDom.Compiler.GeneratedCodeAttribute("{{nameof(AutoOverriddingGenerator)}}", "{{SourceGeneratorVersion.Value}}")]
								{{methodModifiers}} bool Equals([global::System.Diagnostics.CodeAnalysis.NotNullWhenAttribute(true)] object? obj)
									=> obj is {{typeFullName}} comparer && Equals(comparer);
							}
						}
						"""
					);
				}

				spc.AddSource(
					$"AutoOverridding{SourceGeneratorFileNameShortcut.AutoOverriddingGenerator}",
					$$"""
					// <auto-generated />

					#nullable enable

					{{string.Join("\r\n\r\n", list)}}
					"""
				);
			}
		);
	}
}

file sealed record Data(
	string NamespaceName,
	string TypeKind,
	string TypeName,
	string TypeFullName,
	string? TypeParametersString,
	SyntaxTokenList MethodModifiers
);
